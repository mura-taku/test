{"version":3,"sources":["serviceWorker.js","Maps.jsx","index.js"],"names":["Boolean","window","location","hostname","match","GoogleApiWrapper","apiKey","props","useState","place","setPlace","name","setName","lat","lng","center","setCenter","currentPosition","setCurrentPosition","marker","setMarker","success","data","coords","latitude","longitude","error","alert","useEffect","navigator","geolocation","getCurrentPosition","className","type","onChange","e","target","value","onClick","google","maps","Geocoder","geocode","address","region","results","status","GeocoderStatus","OK","geometry","style","height","width","zoom","initialCenter","title","position","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"kMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBCmFSC,G,MAAAA,2BAAiB,CAC9BC,OAAS,2CADID,EAjGF,SAACE,GAAS,MAEKC,mBAAS,IAFd,mBAEdC,EAFc,KAEPC,EAFO,OAIEF,mBAAS,IAJX,mBAIdG,EAJc,KAITC,EAJS,OAMMJ,mBAAS,CAAEK,IAAI,GAAIC,IAAI,KAN7B,mBAMdC,EANc,KAMPC,EANO,OAQsBR,mBAAS,CAACK,IAAI,GAAGC,IAAI,KAR3C,mBAQdG,EARc,KAQEC,EARF,OAUIV,mBAAS,CAACK,IAAI,GAAGC,IAAI,KAVzB,mBAUdK,EAVc,KAUPC,EAVO,KA2CfC,EAAQ,SAACC,GACb,IAAIL,EAAgB,CAACJ,IAAIS,EAAKC,OAAOC,SAASV,IAAIQ,EAAKC,OAAOE,WAC9DP,EAAmBD,GACnBD,EAAUC,IAGNS,EAAM,WACVC,MAAM,yFAERC,qBAAU,WACRC,UAAUC,YAAYC,mBAAmBV,EAAQK,KACjD,IAUF,OACE,oCAEA,yBAAKM,UAAU,UACf,2BAAOC,KAAK,OAAOC,SAvDG,SAACC,GACvBzB,EAASyB,EAAEC,OAAOC,OAClBzB,EAAQuB,EAAEC,OAAOC,UAqDgC,6BACjD,4BAAQC,QAlDS,WACH,KAAV7B,IACe,IAAIF,EAAMgC,OAAOC,KAAKC,UAE9BC,QACP,CACEC,QAASlC,EACTmC,OAAQ,OAEV,SAAUC,EAASC,GACbA,IAAWvC,EAAMgC,OAAOC,KAAKO,eAAeC,IAC9ChC,EAAU6B,EAAQ,GAAGI,SAAS/C,UAC9BkB,EAAUyB,EAAQ,GAAGI,SAAS/C,WAG9ByB,MAAMlB,EAAM,2HAmCpB,gBAA2C,6BAC3C,4BAAQ6B,QAbI,WACZtB,EAAU,CAACH,IAAI,GAAIC,IAAI,KACvBF,EAAQ,sBACRI,EAAUC,KAUV,uBAIA,kBAAC,MAAD,CACEiC,MAAO,CAACC,OAAO,MAAMC,MAAM,QAC3Bb,OAAWhC,EAAMgC,OACjBc,KAAS,GACTtC,OAAUA,EACVuC,cAAiBrC,GAGjB,kBAAC,SAAD,CACEsC,MAAU5C,EACV6C,SAAYrC,IAGd,kBAAC,SAAD,CACEoC,MAAO,qBACPC,SAAUvC,UCtFlBwC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SFwHpB,kBAAmBhC,WACrBA,UAAUiC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAzC,GACL0C,QAAQ1C,MAAMA,EAAM2C,a","file":"static/js/main.5a978af0.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React,{useEffect,useState} from 'react';\r\nimport { GoogleApiWrapper, Map, Marker } from 'google-maps-react';\r\nimport './App.css';\r\n\r\nconst Maps = (props)=> {\r\n  //テキスト内の場所名\r\n  const [place, setPlace] = useState(\"\");\r\n  //マーカーの場所名\r\n  const [name,setName] = useState(\"\");\r\n  //センターの位置\r\n  const [center,setCenter] = useState({ lat:\"\", lng:\"\" });\r\n  //初期の位置\r\n  const [currentPosition,setCurrentPosition]=useState({lat:\"\",lng:\"\"});\r\n  //マーカーの位置\r\n  const [marker,setMarker]=useState({lat:\"\",lng:\"\"});\r\n\r\n  //検索窓の内容変更の関数\r\n  const handleChangePlace=(e)=> {\r\n    setPlace(e.target.value);\r\n    setName(e.target.value);\r\n  }\r\n\r\n  // 検索ボタンを押した時の関数\r\n  const handleSearch=()=> {\r\n    if (place !== \"\") {\r\n      const geocoder = new props.google.maps.Geocoder();\r\n      // Geocodingの呼び出し\r\n      geocoder.geocode(\r\n        {\r\n          address: place,\r\n          region: \"jp\",\r\n        },\r\n        function (results, status) {\r\n          if (status === props.google.maps.GeocoderStatus.OK) {\r\n            setCenter(results[0].geometry.location);\r\n            setMarker(results[0].geometry.location);\r\n          }\r\n          else {\r\n            alert(place+\"：該当する場所が見つかりませんでした。\");\r\n          }\r\n        }\r\n      );\r\n    } \r\n  };\r\n\r\n  //現在地の設定\r\n  //現在地の所得に成功したとき\r\n  const success=(data)=>{\r\n    let currentPosition={lat:data.coords.latitude,lng:data.coords.longitude};\r\n    setCurrentPosition(currentPosition);\r\n    setCenter(currentPosition);\r\n  };\r\n  //現在地の所得に失敗したとき\r\n  const error=()=>{\r\n    alert(\"現在地の所得に失敗しました。\")\r\n  };\r\n  useEffect(()=>{\r\n    navigator.geolocation.getCurrentPosition(success,error);\r\n  },[])\r\n\r\n  //現在地に戻す\r\n  const current=()=>{\r\n    setCenter({lat:\"\", lng:\"\"});\r\n    setName(\"現在地\");\r\n    setCenter(currentPosition);\r\n  };\r\n\r\n\r\n  return (\r\n    <>\r\n    {/*検索窓表示*/}\r\n    <div className='Search'>\r\n    <input type=\"text\" onChange={handleChangePlace}/><br/>\r\n    <button onClick={handleSearch} >検索</button><br/>\r\n    <button onClick={current} >現在地</button>\r\n    </div>\r\n\r\n    {/*マップ表示*/}\r\n    <Map\r\n      style={{height:'90%',width:'100%'}}\r\n      google = { props.google }\r\n      zoom = { 15 }\r\n      center = {center}\r\n      initialCenter = {currentPosition}\r\n    >\r\n      {/*検索結果のマーカー*/}\r\n      <Marker\r\n        title = { name }\r\n        position = {marker}\r\n      />\r\n      {/*現在地のマーカー*/}\r\n      <Marker\r\n        title={\"現在地\"}\r\n        position={currentPosition}\r\n      />\r\n\r\n    </Map>\r\n      </>\r\n  );\r\n};\r\n\r\nexport default GoogleApiWrapper({\r\n  apiKey: (\"AIzaSyAv5pyugepdOfAs9kA2fIDrwmn0vEMSzPU\")\r\n})(Maps);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Map from \"./Maps\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Map />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}